plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

//jar {
//	manifest {
//		attributes 'Main-Class': 'com.smartIct.PublicTransport.PublicTransportApplication'
//	}
//}
group = 'com.smartIct'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

//task fatJar(type: Jar) {
//	manifest {
//		attributes 'Main-Class': 'C:\\Users\\ozlem\\Desktop\\SmartICT Staj 03.08.23\\SmartICT Staj\\PublicTransportV7\\public-transport-backend\\src\\main\\java\\com\\smartIct\\PublicTransport\\PublicTransportApplication.java'
//	}
//	from sourceSets.main.output
//	archiveClassifier = 'all'
//}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate:hibernate-core:5.5.6.Final'
	implementation 'org.postgresql:postgresql:42.2.24'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.jetbrains:annotations:24.0.0'
	implementation 'org.jetbrains:annotations:24.0.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.modelmapper:modelmapper:2.4.4'

}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar() {
	doFirst {
		clean
	}
	enabled = true
	manifest {
		attributes 'Start-Class': 'com.smartIct.PublicTransport.PublicTransportApplication'
	}
}

jar {
	zip64 = true
	enabled = true
	duplicatesStrategy(DuplicatesStrategy.INCLUDE)
	manifest {
		attributes 'Main-Class': 'com.smartIct.PublicTransport.PublicTransportApplication'
	}
	from {
		configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		configurations.runtimeClasspath.collect() { it.isDirectory() ? it : zipTree(it) }
	} exclude("META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
}